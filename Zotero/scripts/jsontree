import json

# Input and output file paths
input_file = "zotero_collection_cache.json"
output_file = "zotero_collection_cache_fixed.json"

# Load the JSON data
with open(input_file, "r", encoding="utf-8") as file:
    data = json.load(file)

# Step 1: Create a dictionary of collections using their keys
collections = {}
for entry in data:
    if (
        isinstance(entry, dict)
        and "data" in entry
        and "name" in entry["data"]
        and "key" in entry["data"]
        and not entry["data"].get("deleted", False)  # Ignore deleted items
    ):
        key = entry["data"]["key"]
        collections[key] = {
            "name": entry["data"]["name"],
            "key": key,
            "children": [],
            "parent": entry["data"].get("parentCollection"),  # Store parent key
        }

# Step 2: Build the nested structure
tree = {}
for key, node in collections.items():
    parent_key = node.pop("parent")  # Remove parent field after use
    if parent_key and parent_key in collections:
        collections[parent_key]["children"].append(node)
    else:
        tree[key] = node  # No parent means it's a root collection

# Step 3: Transform the output format (optional, depending on needs)
output = {node["name"]: node for node in tree.values()}

# Save the transformed data
with open(output_file, "w", encoding="utf-8") as file:
    json.dump(output, file, indent=4)

print(f"Converted JSON saved to {output_file}")